version: 2.1
orbs:
  slack: circleci/slack@4.4.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ~/project/frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd ~/project/backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Frontend Test
          command: |
            cd ~/project/frontend
            npm i
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: Backend Test
          command: |
            cd ~/project/backend
            npm i
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: scanning frontend
          command: |
            cd ~/project/frontend
            npm i
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: scanning backend
          command: |
            cd ~/project/frontend
            npm i
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: ansible/ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1     

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: node
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1     

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure   
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1   
                    
  deploy-backend:
    docker:
      - image: ansible/ansible
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure 
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1 

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: apline
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  cleanup:
    docker:
      # Docker image here
      - image: alpine
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
      - slack/notify:
          event: fail
          template: basic_fail_1
      # When there is a successful deployment, send a notification with a different template.
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1
            

workflows:
  default:
    jobs:
      - build-frontend:
          context:
            - slack
      - build-backend:
          context:
            - slack
      - test-frontend:
          requires: [build-frontend]
          context:
            - slack
      - test-backend:
          requires: [build-backend]
          context:
            - slack
      - scan-backend:
          requires: [build-backend]
          context:
            - slack
      - scan-frontend:
          requires: [build-frontend]
          context:
            - slack
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
          context:
            - slack
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context:
            - slack
      - run-migrations:
          requires: [configure-infrastructure]
          context:
            - slack
      - deploy-frontend:
          requires: [run-migrations]
          context:
            - slack
      - deploy-backend:
          requires: [run-migrations]
          context:
            - slack
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context:
            - slack
      - cloudfront-update:
          requires: [smoke-test]
          context:
            - slack
      - cleanup:
          requires: [cloudfront-update]
          context:
            - slack
